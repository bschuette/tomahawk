## Velocity template used to generate JSF1.2-compatible clientBehavior classes
## from clientBehavior meta-data.
##
## Note that there are only one type of clientBehavior generation:
##  * "subclass mode" (use annotated class as a parent class)
##
## Variable $clientBehavior refers to a BehaviorMeta object to process
## Variable $utils refers to an instance of MyfacesUtils.
##
##
## The java package of the generated class is always the same as
## the package in which the annotated class exists.
##
/*
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 * 
 *  http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */
package ${clientBehavior.packageName};

import javax.el.ValueExpression;
import javax.faces.context.FacesContext;
$utils.importTagClasses($clientBehavior)

#if ($clientBehavior.isTemplate())
#set ($generatedClassParent = $clientBehavior.sourceClassParentClassName)
#else
#set ($generatedClassParent = $clientBehavior.sourceClassName)
#end
// Generated from class ${clientBehavior.sourceClassName}.
//
// WARNING: This file was automatically generated. Do not edit it directly,
//          or you will lose your changes.
public class ${utils.getClassFromFullClass($clientBehavior.className)} extends $generatedClassParent
#if ($clientBehavior.implements)
    implements $clientBehavior.implements
#end
{

#if ($clientBehavior.behaviorId)
    static public final String BEHAVIOR_ID = 
        "$clientBehavior.behaviorId";
#end
#if ($clientBehavior.rendererType)
#if (!($clientBehavior.rendererType == ""))
    static public final String RENDERER_TYPE = 
        "$clientBehavior.rendererType";
#end
#end

    public ${utils.getClassFromFullClass($clientBehavior.className)}()
    {
    }
    
#if ($clientBehavior.rendererType)
#if ($clientBehavior.rendererType == "")
#else
    public String getRendererType()
    {
        return "$clientBehavior.rendererType";
    }
#end
#end
    
    

## ----------------------------- PROPERTY MACROS -----------------------------
##
## -------------------------------
## writePropertySetDeclaration
## -------------------------------
##
#macro (writePropertySetDeclaration $property $type $field $defaultValue )
#if($utils.isPrimitiveClass($type) && !$property.isTagExcluded() )
    private boolean ${field}Set;
    
#end
#end
##
## -------------------------------
## writePropertyDeclaration
## -------------------------------
##
#macro( writePropertyDeclaration $property $type $field $defaultValue )
#if ($property.isLiteralOnly() || $property.isTagExcluded() || !($clientBehavior.isEvaluateELOnExecution()))
    private $type $field #if($defaultValue) = $defaultValue;#{else};#{end}

#else
    private $type $field;
    
#end
#writePropertySetDeclaration ($property $type $field $defaultValue)
#end
##
## -------------------------------
## writeLocalPropertyGetter
## -------------------------------
##
#macro (writeLocalPropertyGetter $property $type $field $defaultValue )
#if($utils.isPrimitiveClass($type) && !$property.isTagExcluded() && $property.isSetMethod())
    $property.setMethodScope boolean $utils.getPrefixedPropertyName("isSet", $property.name)()
    {
        return ${field}Set;
    }

#end
#if($property.isLocalMethod())
#if("boolean" == $type)
#set ($methodName = $utils.getPrefixedPropertyName("isLocal", $property.name))
#else
#set ($methodName = $utils.getPrefixedPropertyName("getLocal", $property.name))
#end
    final $property.localMethodScope $type ${methodName}()
    {
        return $field;
    }

#end
#end
##
## -------------------------------
## writePropertyGetter
## -------------------------------
##
#macro (writePropertyGetter $property $type $field $defaultValue )
    public $type $utils.getMethodReaderFromProperty($property.name, $type)()
    {
#if ($property.isTagExcluded() || $property.isLiteralOnly() || !($clientBehavior.isEvaluateELOnExecution()))
        return $field;
#else
#if ($utils.isPrimitiveClass($type))
        if (${field}Set)
#else
        if ($field != null)
#end
        {
            return $field;
        }
        ValueExpression vb = getValueExpression("$property.name");
        if (vb != null)
        {
#if ($utils.isPrimitiveClass($type))
            return ($utils.castIfNecessary($type) vb.getValue(getFacesContext().getELContext())).${type}Value();
#else
#set ($pritype = $utils.getPrimitiveType($property.className))
#if ($utils.isPrimitiveClass($pritype))
            Object value = vb == null ? null : vb.getValue(getFacesContext().getELContext());
            if (!(value instanceof $type)){
                value = ${type}.valueOf(value.toString());
            }            
            return $utils.castIfNecessary($type) value;
#else
            return $utils.castIfNecessary($type) vb.getValue(getFacesContext().getELContext());
#end
#end
        }
#if ($defaultValue)
        return $defaultValue; 
#elseif ($utils.isPrimitiveClass($type))
        return $utils.primitiveDefaultValue($type);
#else       
        return null;
#end
#end
    }

#end
##
## -------------------------------
## writePropertySetter
## -------------------------------
##
#macro (writePropertySetter $property $type $field $defaultValue )
    public void $utils.getPrefixedPropertyName("set", $property.name)($type $utils.getVariableFromName($property.name))
    {
        this.$field = $utils.getVariableFromName($property.name);
#if ($utils.isPrimitiveClass($type) && !$property.isTagExcluded() )
        this.${field}Set = true;        
#end
    }

#end
##
## -------------------------------
## writePropertySetStateHelperDeclaration
## -------------------------------
##
#macro (writePropertySetStateHelperDeclaration $property $type $field $defaultValue )
#if($utils.isPrimitiveClass($type) && !$property.isTagExcluded() && $property.isSetMethod())
    private boolean ${field}Set;
    
#end
#end
##
## -------------------------------
## writePropertyStateHelperDeclaration
## -------------------------------
##
#macro( writePropertyStateHelperDeclaration $property $type $field $defaultValue )
#if ($property.isPartialStateHolder())
#if ($property.isLiteralOnly() || $property.isTagExcluded())
    private $type $field #if($defaultValue) = $defaultValue;#{else};#{end}

#else
    private $type $field;
    
#end
#end
#writePropertySetStateHelperDeclaration ($property $type $field $defaultValue)
#end
##
## -------------------------------
## writeLocalPropertyStateHelperGetter
## -------------------------------
##
#macro (writeLocalPropertyStateHelperGetter $property $type $field $defaultValue )
#if($utils.isPrimitiveClass($type) && !$property.isTagExcluded() && $property.isSetMethod())
    $property.setMethodScope boolean $utils.getPrefixedPropertyName("isSet", $property.name)()
    {
        return ${field}Set;
    }

#end
#if($property.isLocalMethod())
#if("boolean" == $type)
#set ($methodName = $utils.getPrefixedPropertyName("isLocal", $property.name))
#else
#set ($methodName = $utils.getPrefixedPropertyName("getLocal", $property.name))
#end
    final $property.localMethodScope $type ${methodName}()
    {
#if ($property.isPartialStateHolder())
        return $field;
#else
        return $utils.castIfNecessary($type) getStateHelper().get(PropertyKeys.$field);
#end
    }

#end
#end
##
## -------------------------------
## writePropertyStateHelperGetter
## -------------------------------
##
#macro (writePropertyStateHelperGetter $property $type $field $defaultValue )
#if ($property.isPartialStateHolder())
    public $type $utils.getMethodReaderFromProperty($property.name, $type)()
    {
#if ($property.isTagExcluded() || $property.isLiteralOnly() || !($clientBehavior.isEvaluateELOnExecution()))
        return $field;
#else
#if ($utils.isPrimitiveClass($type))
        if (${field}Set)
#else
        if ($field != null)
#end
        {
            return $field;
        }
        ValueExpression vb = getValueExpression("$property.name");
        if (vb != null)
        {
#if ($utils.isPrimitiveClass($type))
            return ($utils.castIfNecessary($type) vb.getValue(getFacesContext().getELContext())).${type}Value();
#else
#set ($pritype = $utils.getPrimitiveType($property.className))
#if ($utils.isPrimitiveClass($pritype))
            Object value = vb == null ? null : vb.getValue(getFacesContext().getELContext());
            if (!(value instanceof $type)){
                value = ${type}.valueOf(value.toString());
            }            
            return $utils.castIfNecessary($type) value;
#else
            return $utils.castIfNecessary($type) vb.getValue(getFacesContext().getELContext());
#end
#end
        }
#if ($defaultValue)
        return $defaultValue; 
#elseif ($utils.isPrimitiveClass($type))
        return $utils.primitiveDefaultValue($type);
#else       
        return null;
#end
#end
    }

#else
    public $type $utils.getMethodReaderFromProperty($property.name, $type)()
    {
#if ($property.isLiteralOnly())
#if ($defaultValue)
        Object value = getStateHelper().get(PropertyKeys.$field);
        if (value != null)
        {
            return $utils.castIfNecessary($type) value;        
        }
        return $defaultValue;        
#else
        return $utils.castIfNecessary($type) getStateHelper().get(PropertyKeys.$field);        
#end
#else
#if ($defaultValue)
        return $utils.castIfNecessary($type) getStateHelper().eval(PropertyKeys.$field, $defaultValue);
#else
        return $utils.castIfNecessary($type) getStateHelper().eval(PropertyKeys.$field);
#end
#end
    }
    
#end
#end
##
## -------------------------------
## writePropertyStateHelperSetter
## -------------------------------
##
#macro (writePropertyStateHelperSetter $property $type $field $defaultValue )
#if ($property.isPartialStateHolder())
    public void $utils.getPrefixedPropertyName("set", $property.name)($type $utils.getVariableFromName($property.name))
    {
        this.$field = $utils.getVariableFromName($property.name);
        if (initialStateMarked())
        {
            getStateHelper().put(PropertyKeys.${property.name}Set,Boolean.TRUE);
        }
#if ($utils.isPrimitiveClass($type) && !$property.isTagExcluded() && $property.isSetMethod())
        this.${field}Set = true;        
#end
    }

#else
    public void $utils.getPrefixedPropertyName("set", $property.name)($type $utils.getVariableFromName($property.name))
    {
        getStateHelper().put(PropertyKeys.$field, $utils.getVariableFromName($property.name) ); 
#if ($utils.isPrimitiveClass($type) && !$property.isTagExcluded() && $property.isSetMethod())
        this.${field}Set = true;        
#end
    }    

#end
#end
##
## ----------------------------- END PROPERTY MACROS -------------------------
##
## ----------------------------- START PROPERTY RENDERING --------------------
#set ($propertyList = ${clientBehavior.propertyBehaviorList})

#foreach( $property in $propertyList )
#set ($field = $property.fieldName)
#set ($type = $utils.getClassFromFullClass($property.className))
#if($utils.getDefaultValueField($property)) 
#set ($defaultValue = $utils.getDefaultValueField($property))
#else
#set ($defaultValue = false)
#end
    // Property: $property.name
#if ($clientBehavior.isEvaluateELOnExecution())
#if ($property.name == "for")
## To keep compatibility with RI, we should call it forVal
#set ($field = "forVal")
#else
#set ($field = $property.name)
#end
## USING PARTIAL STATE SAVING STATE HELPER
#writePropertyStateHelperDeclaration($property $type $field $defaultValue)
#writeLocalPropertyStateHelperGetter ($property $type $field $defaultValue)
#writePropertyStateHelperGetter ($property $type $field $defaultValue)
#writePropertyStateHelperSetter ($property $type $field $defaultValue)
#else
## USING VARIABLES
#writePropertyDeclaration($property $type $field $defaultValue)
#writeLocalPropertyGetter ($property $type $field $defaultValue)
#writePropertyGetter ($property $type $field $defaultValue)
#writePropertySetter ($property $type $field $defaultValue)
#end
#end
## ----------------------------- END PROPERTY RENDERING ---------------------
#if ( !($clientBehavior.isEvaluateELOnExecution()) )

    public Object saveState(FacesContext facesContext)
    {
#set ($primitiveCount = $propertyList.size() + 1)
#foreach( $property in $propertyList )
#if($utils.isPrimitiveClass($property.className))
#set ($primitiveCount = $primitiveCount + 1)
#end
#end
        Object[] values = new Object[$primitiveCount];
        values[0] = super.saveState(facesContext);
#set ($arrayIndex = 0)
#foreach( $property in $propertyList )
#set ($field = $property.fieldName)
#set ($type = $property.className)
#set ($arrayIndex = $arrayIndex + 1)
#if ($property.jspName == "validator" && $property.isMethodBinding() )
        values[$arrayIndex] = saveAttachedState(facesContext,${field}List);
#elseif ( $property.isStateHolder() )## || $utils.isConverter($type)
        values[$arrayIndex] = saveAttachedState(facesContext,$field);
#elseif($utils.isPrimitiveClass($type))
        values[$arrayIndex] = ${utils.getBoxedClass($type)}.valueOf($field);
#else
        values[$arrayIndex] = $field;
#end
#if($utils.isPrimitiveClass($type) && !$property.isTagExcluded())
#set ($arrayIndex = $arrayIndex + 1)
        values[$arrayIndex] = Boolean.valueOf(${field}Set);
#end
#end
        return values; 
    }

    public void restoreState(FacesContext facesContext, Object state)
    {
        Object[] values = (Object[])state;
        super.restoreState(facesContext,values[0]);
#set ($arrayIndex = 0)
#foreach( $property in $propertyList )
#set ($field = $property.fieldName)
#set ($type = $property.className)
#set ($arrayIndex = $arrayIndex + 1)
#if ( $property.isStateHolder() )
#if ($property.jspName == "validator" && $property.isMethodBinding() )
        ${field}List = (List<Validator>) restoreAttachedState(facesContext,values[$arrayIndex]);
#elseif ($utils.isList($type))
        $field = (List) restoreAttachedState(facesContext,values[$arrayIndex]);
#else
        $field = $utils.castIfNecessary($type) restoreAttachedState(facesContext,values[$arrayIndex]); 
#end
#elseif ($utils.isConverter($type)) 
        $field = (Converter) restoreAttachedState(facesContext,values[$arrayIndex]);
#elseif ($utils.isPrimitiveClass($type))
        $field = ($utils.castIfNecessary($type) values[$arrayIndex]).${type}Value();
#else
        $field = $utils.castIfNecessary($type) values[$arrayIndex];
#end
#if($utils.isPrimitiveClass($type) && !$property.isTagExcluded() )
#set ($arrayIndex = $arrayIndex + 1)
        ${field}Set = ((Boolean) values[$arrayIndex]).booleanValue();
#end
#end
    }
#else
    enum PropertyKeys
    {

#set ($comma = "")
#set ($addc = "false")
#foreach( $property in $propertyList )
#if ($property.name == "for")
#set ($addc = "true")
## To keep compatibility with RI, we should call it forVal
#set ($field = "forVal")
#else
#set ($field = $property.name)
#end
#set ($type = $utils.getClassFromFullClass($property.className))
#if($utils.getDefaultValueField($property)) 
#set ($defaultValue = $utils.getDefaultValueField($property))
#else
#set ($defaultValue = false)
#end
#if ($property.name == "for")
        $comma $field("for")
#else
#if ($property.isPartialStateHolder())
        $comma ${field}Set
#else
        $comma $field
#end
#end
#set($comma = ",")
#end
#if ("true" == $addc)
        ;
        String c;
        
        PropertyKeys()
        {
        }
        
        //Constructor needed by "for" property
        PropertyKeys(String c)
        { 
            this.c = c;
        }
        
        public String toString()
        {
            return ((this.c != null) ? this.c : super.toString());
        }
#end
    }

#set ($primitiveCount = 1) ## $propertyList.size() + 1 
#foreach( $property in $propertyList )
#if ($property.isPartialStateHolder())
#set ($primitiveCount = $primitiveCount + 1)
#if($utils.isPrimitiveClass($property.className))
#set ($primitiveCount = $primitiveCount + 1)
#end
#end
#end
## saveState and restoreState methods only has sense if we have properties
## that does not use StateHelper class.
#if ($primitiveCount > 1)

    public void markInitialState()
    {
        super.markInitialState();
#foreach( $property in $propertyList )
#set ($field = $property.fieldName)
#if ($property.isPartialStateHolder())        
        if ($field != null && 
            $field instanceof PartialStateHolder)
        {
            ((PartialStateHolder)$field).markInitialState();
        }
#end
#end
    }
    
    public void clearInitialState()
    {
        if (initialStateMarked())
        {
            super.clearInitialState();
#foreach( $property in $propertyList )
#set ($field = $property.fieldName)
#if ($property.isPartialStateHolder())
##          //Only has sense propagate this method if is initialStateMarked
            if ($field != null && 
                $field instanceof PartialStateHolder)
            {
                ((PartialStateHolder)$field).clearInitialState();
            }
#end
#end
        }
    }

    @Override
    public Object saveState(FacesContext facesContext)
    {
        if (initialStateMarked())
        {
            boolean nullDelta = true;
            Object parentSaved = super.saveState(facesContext);
#set ($arrayIndex = 0)
#foreach( $property in $propertyList )
#set ($field = $property.fieldName)
#set ($type = $property.className)
#if ($property.isPartialStateHolder())
#set ($arrayIndex = $arrayIndex + 1)
            Object ${property.name}Saved = null;
            if (!_$utils.getPrefixedPropertyName("isSet", $property.name)() &&
                $field != null && $field instanceof PartialStateHolder)
            {
                //Delta
                StateHolder holder = (StateHolder) $field;
                if (!holder.isTransient())
                {
                    Object attachedState = holder.saveState(facesContext);
                    if (attachedState != null)
                    {
                        nullDelta = false;
                    }
                    ${property.name}Saved = new _AttachedDeltaWrapper(${field}.getClass(),
                        attachedState);
                }
            }
            else if (_$utils.getPrefixedPropertyName("isSet", $property.name)() || $field != null )
            {
                //Full
                ${property.name}Saved = saveAttachedState(facesContext,$field);
                nullDelta = false;
            }        
## StateHelper Properties does not need save and restore
#end
#end
            if (parentSaved == null && nullDelta)
            {
                //No values
                return null;
            }
            
            Object[] values = new Object[$primitiveCount];
            values[0] = parentSaved;
## Save full state
#set ($arrayIndex = 0)
#foreach( $property in $propertyList )
#set ($field = $property.fieldName)
#set ($type = $property.className)
#if ($property.isPartialStateHolder())
#set ($arrayIndex = $arrayIndex + 1)
            values[$arrayIndex] = ${property.name}Saved;
## StateHelper Properties does not need save and restore
#end
#end
            return values;
        }
        else
        {
            Object[] values = new Object[$primitiveCount];
            values[0] = super.saveState(facesContext);
## Save full state
#set ($arrayIndex = 0)
#foreach( $property in $propertyList )
#set ($field = $property.fieldName)
#set ($type = $property.className)
#if ($property.isPartialStateHolder())
#set ($arrayIndex = $arrayIndex + 1)
            values[$arrayIndex] = saveAttachedState(facesContext,$field);
## StateHelper Properties does not need save and restore
#end
#end
            return values;
        }
    }

    @Override
    public void restoreState(FacesContext facesContext, Object state)
    {
        if (state == null)
        {
            return;
        }
        
        Object[] values = (Object[])state;
        super.restoreState(facesContext,values[0]);
#set ($arrayIndex = 0)
#foreach( $property in $propertyList )
#set ($field = $property.fieldName)
#set ($type = $property.className)
#if ($property.isPartialStateHolder())
#set ($arrayIndex = $arrayIndex + 1)
        if (values[$arrayIndex] instanceof _AttachedDeltaWrapper)
        {
            //Delta
            ((StateHolder)$field).restoreState(facesContext, ((_AttachedDeltaWrapper) values[$arrayIndex]).getWrappedStateObject());
        }
        else
        {
            //Full
            $field = $utils.castIfNecessary($type) restoreAttachedState(facesContext,values[$arrayIndex]);
        }         
#else
## StateHelper Properties does not need save and restore
#end
#end
    }
#end
#end
}
